React Query CRUD with Separate Hooks (GET, POST, PUT, DELETE)
=============================================================

✅ Why this pattern?
Instead of using one hook with a switch-case, we define four clean and isolated hooks for each CRUD operation.

-------------------------------------------------------------
Folder Structure:
-------------------------------------------------------------
src/
├── api/
│   ├── axios.js
│   ├── useGet.js
│   ├── usePost.js
│   ├── usePut.js
│   ├── useDelete.js

-------------------------------------------------------------
1. axios.js
-------------------------------------------------------------
import axios from "axios";

export const axiosInstance = axios.create({
  baseURL: "https://jsonplaceholder.typicode.com",
  headers: { "Content-Type": "application/json" },
});

-------------------------------------------------------------
2. useGet.js
-------------------------------------------------------------
import { useQuery } from "@tanstack/react-query";
import { axiosInstance } from "./axios";

export const useGet = (queryKey, url, options = {}) =>
  useQuery({
    queryKey: [queryKey],
    queryFn: async () => {
      const res = await axiosInstance.get(url);
      return res.data;
    },
    ...options,
  });

-------------------------------------------------------------
3. usePost.js
-------------------------------------------------------------
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "./axios";

export const usePost = (onSuccessCallback) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ url, data }) => {
      const res = await axiosInstance.post(url, data);
      return res.data;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries();
      if (onSuccessCallback) onSuccessCallback(data);
    },
  });
};

-------------------------------------------------------------
4. usePut.js
-------------------------------------------------------------
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "./axios";

export const usePut = (onSuccessCallback) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ url, data }) => {
      const res = await axiosInstance.put(url, data);
      return res.data;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries();
      if (onSuccessCallback) onSuccessCallback(data);
    },
  });
};

-------------------------------------------------------------
5. useDelete.js
-------------------------------------------------------------
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { axiosInstance } from "./axios";

export const useDelete = (onSuccessCallback) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (url) => {
      const res = await axiosInstance.delete(url);
      return res.data;
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries();
      if (onSuccessCallback) onSuccessCallback(data);
    },
  });
};

-------------------------------------------------------------
✅ Why we didn't use useCallback
-------------------------------------------------------------
- `useCallback` is used to memoize functions between renders.
- React Query’s `mutate` function is already optimized and doesn’t need to be wrapped in `useCallback`.
- However, if you're passing the `mutate` function or handlers to child components, then yes, `useCallback` can be used in the component (not in the hook itself).

-------------------------------------------------------------
✅ Summary
-------------------------------------------------------------
- Separation of concerns
- Cleaner and maintainable code
- Easier debugging and extension
- Ideal for TypeScript and larger teams
